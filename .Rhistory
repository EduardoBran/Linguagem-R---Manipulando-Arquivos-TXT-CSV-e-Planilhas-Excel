# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
# Mostra pacotes carregados na sessão atual
search()
# Importando arquivo com read.table()
?read.table
df1 <- read.table("jogadores.txt")
df1
dim(df1)
# carregado arquivo com parâmetros header (importar com cabeçalho) e sep (separador de coluna)
df1 <- read.table("jogadores.txt", header = TRUE, sep = ',')
# carregado arquivo com parâmetros header (importar com cabeçalho) e sep (separador de coluna)
df1 <- read.table("jogadores.txt", header = TRUE, sep = ',')
df1
# retorna numero de linhas e coluna
dim(df1)
df1 <- read.table("jogadores.txt", header = TRUE, sep = ',',
col.names = c('var1', 'var2', 'var3'))
df1
df1 <- read.table("jogadores.txt", header = TRUE, sep = ',',
col.names = c('var1', 'var2', 'var3'),
na.strings = c('Tulio', 'Romario'))
df1
str(df1)
df1 <- read.table("jogadores.txt", header = TRUE, sep = ',',
col.names = c('var1', 'var2', 'var3'))
# visualiza tipos de dados
str(df1)
df1
# visualiza tipos de dados
str(df1)
df1 <- read.table("jogadores.txt", header = TRUE, sep = ',',
col.names = c('var1', 'var2', 'var3'),
na.strings = c('Tulio', 'Romario'))
df1
# visualiza tipos de dados
str(df1)
df1 <- read.table("jogadores.txt", header = TRUE, sep = ',',
col.names = c('var1', 'var2', 'var3'),
na.strings = c('Zico', 'Maradona'),
stringsAsFactors = TRUE)
df1
# visualiza tipos de dados
str(df1)
df1 <- read.csv("jogadores.txt")
df1
# retorna numero de linhas e coluna
dim(df1)
df1 <- read.table("jogadores.txt")
df1
df1 <- read.csv("jogadores.txt")
df1
# retorna numero de linhas e coluna
dim(df1)
df1 <- read.csv2("jogadores.txt")
df1
# retorna numero de linhas e coluna
dim(df1)
df1 <- read.csv("jogadores.txt", sep = ',')
df1
# retorna numero de linhas e coluna
dim(df1)
df1 <- read.csv2("jogadores.txt", sep = ',')
df1
df1 <- read.csv2("jogadores.txt")
df1
df1 <- read.csv2("jogadores.txt", sep = ',')
df1
df1 <- read.table("jogadores.txt")
df1
# retorna numero de linhas e coluna
dim(df1)
df1 <- read.csv2("jogadores.txt")
df1
# retorna numero de linhas e coluna
dim(df1)
df1 <- read.csv2("jogadores.txt", sep = ',')
df1
# retorna numero de linhas e coluna
dim(df1)
df1 <- read.delim("jogadores.txt")
df1
df1 <- read.delim("jogadores.txt", sep = ',')
df1
# retorna numero de linhas e coluna
dim(df1)
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
?read.table
?write.table
# exporta
?write.table
write.table(mtcars, file = 'mtcars.txt')
dir()
# Importando arquivo com read.table
df_mtcars <- read.table("mtcars.txt")
View(df_mtcars)
dim(df_mtcars)
dim(mtcars)
View(df_mtcars)
dim(mtcars)
write.table(mtcars, file = 'mtcars.txt', sep = "|", col.names = NA)
# conteudo do diretorio
list.files()
write.table(mtcars, file = 'mtcars.txt')
# conteudo do diretorio
dir()
View(df_mtcars)
# conteudo do diretorio
list.files()
write.table(mtcars, file = 'mtcars2.txt', sep = "|", col.names = NA)
# conteudo do diretorio
list.files()
# Importando arquivo com read.table
df_mtcars <- read.table("mtcars2.txt")
# Importando arquivo com read.table
df_mtcars <- read.table("mtcars.txt")
# Importando arquivo com read.table
df_mtcars2 <- read.table("mtcars2.txt")
View(df_mtcars2)
# Importando arquivo com read.table
df_mtcars2 <- read.table("mtcars2.txt", sep = '|')
View(df_mtcars2)
dim(df_mtcars2)
write.table(mtcars, file = 'mtcars2.txt', sep = "|", col.names = NA, qmethod = "double")
# Importando arquivo com read.table
df_mtcars2 <- read.table("mtcars2.txt", sep = '|')
View(df_mtcars2)
View(df_mtcars)
View(df_mtcars2)
View(df_mtcars)
df_mtcars2 <- read.table("mtcars2.txt", header = TRUE, sep = '|')
View(df_mtcars2)
df_mtcars2 <- read.table("mtcars2.txt", header = TRUE, sep = '|', encoding = 'UTF-8')
View(df_mtcars2)
dim(df_mtcars2)
View(mtcars)
View(df_mtcars2)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
# usando o pacote readr
install.packages('readr')
# usando o pacote readr
# install.packages('readr')
library(readr)
?write.csv
write.csv(iris, 'iris.csv')
dir()
source("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R/03-Manipulando_Arquivos_CSV.R", encoding = 'UTF-8')
source("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R/03-Manipulando_Arquivos_CSV.R", encoding = 'UTF-8')
# Exportando o dataset e gerando o arquivo com o write_csv()
write_csv(iris, 'iris.csv')
# conteudo do diretorio
dir()
# Carregando o arquivo com read_csv()
df_iris <- read_csv("iris.csv",
col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petaç.Width = col_double(),
Species = col_factor(c('setosa', 'versicolor', 'virginica'))
))
# Carregando o arquivo com read_csv()
df_iris <- read_csv("iris.csv",
col_types = list(
Sepal.Length = col_double(),
Sepal.Width = col_double(),
Petal.Length = col_double(),
Petal.Width = col_double(),
Species = col_factor(c('setosa', 'versicolor', 'virginica'))
))
View(df_iris)
dim(df_iris)
str(df_iris)
df(iris)
View(iris)
str(iris)
df_iris2 <- read.csv("iris.csv")
df_iris2 <- read.csv("iris.csv")
View(df_iris2)
dim(df_iris2)
str(df_iris2)
df_iris2 <- read.csv("iris.csv", stringsAsFactors = TRUE)
str(df_iris2)
dim(df_iris2)
dim(df_iris)
# Gerando mais um arquivo CSV
write_csv(mtcars, 'mtcars.csv')
dir()
# conteudo do diretorio
list.files()
# conteudo do diretorio
list.files()
lista_arquivos_csv <- list.files(getwd(), full.names = TRUE, pattern = "*.csv")
lista_arquivos_csv
lista_arquivos_csv2 <- lapply(lista_arquivos_csv, read_csv)
class(lista_arquivos_csv2)
View(lista_arquivos_csv2)
View(lista_arquivos_csv2)
View(lista_arquivos_csv2)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
# Instalando o pacote
install.packages('readxl')
# Carregando o pacote
library(readxl)
# Lista as worksheet no arquivo Excel (lista as planilhas dentro do arquivo)
excel_sheets("PopUrbana.xlsx")
# Lendo a planilha do Excel
read_excel("PopUrbana.xlsx")
View(read_excel("PopUrbana.xlsx"))
# Lendo somente planilha 'Period2'
read_excel("PopUrbana.xlsx", sheet = 'Period2')
View(read_excel("PopUrbana.xlsx", sheet = 'Period2'))
View(read_excel("PopUrbana.xlsx", sheet = 3))
View(read_excel("PopUrbana.xlsx", sheet = 4))
# Importando uma worksheet (planilha) para um dataframe (planilha 'Period3')
df <- read_excel("PopUrbana.xlsx", sheet = 3)
View(df)
# Importando uma worksheet (planilha) para um dataframe (planilha 'Period3')
df <- read_excel("PopUrbana.xlsx", sheet = 5)
# Importando uma worksheet (planilha) para um dataframe (planilha 'Period3')
df <- read_excel("PopUrbana.xlsx", sheet = 3)
View(df)
df_todas <- lapply(excel_sheets("PopUrbana.xlsx"), read_excel, path = "PopUrbana.xlsx")
View(df_todas)
# Instala o pacote
install.packages("rjson")
# Carrega o pacote
library(rjson)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
# Carrega o arquivo
resultado <- fromJSON(file = 'funcionarios.json')
print(resultado)
resultado
View(resultado)
# Carrega o arquivo
arquivo_json <- fromJSON(file = 'funcionarios.json')
json_data_frame <- as.data.frame(arquivo_json)
json_data_frame
View(json_data_frame)
View(json_data_frame)
library(readr)
?write_csv
dir()
write_csv(json_data_frame, 'funcionariosCSV.csv')
dir()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
# Instala o pacote
install.packages("XML")
# Carrega o pacote
library("XML")
# Carrega o pacote necessssário para manipular conteúdo XML
library("methods")
# Carrega o arquivo
arquiv_xml <- xmlParse(file = 'funcionarios.xml')
arquivo_xml
# Carrega o arquivo
arquivo_xml <- xmlParse(file = 'funcionarios.xml')
arquivo_xml
View(arquivo_xml)
