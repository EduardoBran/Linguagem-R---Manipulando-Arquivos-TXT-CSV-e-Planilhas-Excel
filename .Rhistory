install.packages("Rtools")
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostra
amostra
# gerando amostra sistematica até 150 em 10 grupos
amostra = S.SY(150, 10)
amostra
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris
dim(amostra_iris)
install.packages("sampling")
library("sampling")
proporcao = 25
amostra_iris = strata(data=iris, stratanames=c('Species'), size=c(rep(proporcao, 3)), method='srswor')
# Exibindo resultado através de um sumario
summary(amostra_iris)
infert
summary(infert)
# outro exemplo usando conjunto de dados infert (características de infertilidade)
infert
summary(infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor')
# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos/BigDataNaPratica_NetFlix")
getwd()
library(dplyr)
library(tidyr)
library(readxl)
library(readr)
# Carregando os dados da Netflix
dados_netflix <- read.csv("datasets_originais/dados_netflix_Dec_2021.csv")
# Carregando os dados do World Bank
dados_pib <- read.csv("datasets_originais/dados_world_bank.csv", header = FALSE) # com header =  false, ele nao transforma em nome de coluna a primeira linha e cria nomeia automaticamente o nome das colunas com V1, V2, V3...
# Carregando os dados de desigualdade salarial
dados_salario <- read.csv("datasets_originais/dados_desigualdade_salarial_harvard.csv")
# Carregando os dados dos top 10 shows da NetFlix por país
dados_top10 <- read_excel("datasets_originais/top_10_shows_netflix.xlsx")
# Carregando dados de assinantes da Netflix em Julho/2021
dados_sub <- read.csv("datasets_originais/assinantes_netflix_jul_2021.csv")
# Carregando os dados de códigos ISO dos países
countrycode <- read.csv("datasets_originais/wikipedia-iso-country-codes.csv")
dados_netflix$basic_standard_diff = (dados_netflix$Cost.Per.Month...Standard.... - dados_netflix$Cost.Per.Month...Basic....)
# Cria uma coluna com a diferença de dados para o gráfico de barras (plano premium - plano standard)
dados_netflix$standard_premium_diff = (dados_netflix$Cost.Per.Month...Premium.... - dados_netflix$Cost.Per.Month...Standard....)
View(dados_netflix)
# Combina os dados anteriores com dados do PIB
# renomeando para 'Country' a primeira coluna de 'dados_pib'
names(dados_pib)[names(dados_pib) == 'V1'] <- 'Country'
# A função merge() é utilizada para combinar os conjuntos de dados 'dados_netflix' e 'dados_pib' com base na coluna Country.
# Isso cria um novo conjunto de dados chamado dados_netflix_pib, que contém todas as informações dos dois conjuntos de dados
# originais, combinadas em uma única tabela. A combinação é feita de tal forma que apenas as linhas que possuem o mesmo valor
# na coluna Country em ambos os conjuntos de dados são mantidas.
dados_netflix_pib <- merge(dados_netflix, dados_pib, by = 'Country')
View(dados_netflix_pib)
# Extrai o PIB de 2020
# exclui todas as colunas de 11 a 72 e 74 e 75 de 'dados_netflix_pib' e cria um novo df. Essas colunas
# correspondiam aos dados dos anos anteriores a 2020
dados_netflix_pib2020 <- dados_netflix_pib[-c(11:72, 74, 75)]
View(dados_netflix_pib2020)
# renomeando o nome da coluna
names(dados_netflix_pib2020)[names(dados_netflix_pib2020) == 'V64'] <- '2020 GDP (World Bank)'
View(dados_netflix_pib2020)
dados_salario <- dados_salario[, c(1:3)]
View(dados_salario)
# Cria um novo df onde ele utiliza o operador %>% (pipe) para direcionar a saída do objeto dados_salario para a próxima função.
# Em seguida, o group_by(country) agrupa os dados de salário pelo nome do país.
# O summarise(max = max(year, na.rm = TRUE)) resume os dados agrupados, calculando o máximo valor da variável year para cada
# país e atribuindo o resultado a uma nova coluna chamada max. O argumento na.rm = TRUE é utilizado para remover valores
# faltantes (NA) na coluna year, caso existam.
dados_salario_ano <- dados_salario %>% group_by(country) %>% summarise(max = max(year, na.rm = TRUE))
View(dados_salario_ano)
# Combina os dataframes
# - Combinando os dois df dados_salario e dados_salario_ano usando o país usando a funcao merge().
# - O argumento by.x especifica quais colunas da tabela dados_salario devem ser usadas como chave de junção. Nesse caso, as
#   colunas são country e year. O argumento by.y especifica quais colunas da tabela dados_salario_ano devem ser usadas como
#   chave de junção. Nesse caso, as colunas são country e max.
# - Assim, a tabela resultante dados_salario2 contém informações sobre o índice de desigualdade de renda (gini_disp) para cada
#   país e ano presente na tabela dados_salario, juntamente com o ano máximo presente na tabela dados_salario_ano.
# - Caso haja países com anos diferentes entre as tabelas, os registros desses países serão descartados na junção. Já se
#   houver anos diferentes para um mesmo país nas tabelas, os registros serão mantidos e apresentados na tabela final.
dados_salario2 <- merge(dados_salario, dados_salario_ano, by.x = c('country', 'year'), by.y = c('country', 'max'))
View(dados_salario2)
dados_netflix_pib_salario2020 <- merge(dados_netflix_pib2020, dados_salario2, by.x = c('Country'), by.y = c('country'))
View(dados_netflix_pib_salario2020)
# Limpa o dataset de faturamento e subscrição (deleta as colunas indicadas)
dados_sub2 <- dados_sub[, c(1, 23, 24)]
View(dados_sub2)
# Com a função merge() combina os conjuntos de dados 'dados_netflix_pib_salario2020' e 'dados_sub2' com base na coluna Country.
complete <- merge(dados_netflix_pib_salario2020, dados_sub2, by = c('Country'))
View(complete)
# Faz um merge do countrycode para o complete
# Deletando colunas de countrycode
countrycode2 <- countrycode[, c(1, 3)]
View(countrycode2)
# Realiza um merge() entre dois data frames: complete e countrycode2, baseado na colunas Country e English.short.name.lower.case
# Adiciona a coluna com Codigo de Cada País
complete <- merge(complete, countrycode2, by.x = c('Country'), by.y = c('English.short.name.lower.case'))
View(complete)
# Salva o dataframe
write.csv(complete, 'datasets_limpos/dataset1.csv', row.names = FALSE)
countrycode <- read.csv("datasets_originais/wikipedia-iso-country-codes.csv")
View(countrycode)
View(dados_netflix_pib_salario2020)
View(dados_salario)
View(dados_salario)
# Cria um novo df onde ele utiliza o operador %>% (pipe) para direcionar a saída do objeto dados_salario para a próxima função.
# Em seguida, o group_by(country) agrupa os dados de salário pelo nome do país.
# O summarise(max = max(year, na.rm = TRUE)) resume os dados agrupados, calculando o máximo valor da variável year para cada
# país e atribuindo o resultado a uma nova coluna chamada max. O argumento na.rm = TRUE é utilizado para remover valores
# faltantes (NA) na coluna year, caso existam.
dados_salario_ano <- dados_salario %>% group_by(country) %>% summarise(max = max(year, na.rm = TRUE))
View(dados_salario_ano)
View(dados_salario_ano)
View(dados_salario)
dados_salario2 <- merge(dados_salario, dados_salario_ano, by.x = c('country', 'year'), by.y = c('country', 'max'))
View(dados_salario2)
View(dados_netflix_pib_salario2020)
View(dados_salario2)
df1 <- data.frame(A = c(1, 2, 3), B = c("a", "b", "c"))
df2 <- data.frame(A = c(2, 3, 4), C = c(5, 6, 7))
merged_df <- merge(df1, df2, by.x = "A", by.y = "A")
View(df1)
View(df2)
View(merged_df)
View(merged_df)
# Selecionando as colunas desejadas
mtcars_subset <- mtcars[, c("mpg", "cyl", "gear")]
View(mtcars_subset)
# Criando um data frame com o valor máximo de "gear" por número de cilindros "cyl"
max_gear_by_cyl <- mtcars_subset %>%
group_by(cyl) %>%
summarise(max_gear = max(gear))
View(max_gear_by_cyl)
# Fazendo um merge entre o data frame original e o com o valor máximo de "gear" por número de cilindros
mtcars_merged <- merge(mtcars_subset, max_gear_by_cyl, by.x = c("cyl", "gear"), by.y = c("cyl", "max_gear"))
View(mtcars_merged)
#criando o dataframe da população
populacao <- data.frame(pais = c("Brasil", "Brasil", "Argentina", "Argentina"),
ano = c(2010, 2015, 2010, 2015),
pop = c(192376496, 204471769, 40412376, 43416755))
View(populacao)
#criando o dataframe do PIB
pib <- data.frame(pais = c("Brasil", "Brasil", "Argentina", "Argentina"),
ano = c(2010, 2015, 2010, 2015),
pib = c(2201024269918, 1775807106436, 369446376293, 545701551954))
View(pib)
#juntando as informações dos dois dataframes
dados_juntos <- merge(populacao, pib, by.x = c("pais", "ano"), by.y = c("pais", "ano"))
#printando o resultado
View(dados_juntos)
dados_juntos2 <- merge(populacao, pib, by.x = c("pais", "ano"))
dados_juntos3 <- merge(populacao, pib, by.y = c("pais", "ano"))
View(dados_junto2)
dados_juntos2 <- merge(populacao, pib, by.x = c("pais", "ano"))
dados_juntos3 <- merge(populacao, pib, by.y = c("pais", "ano"))
View(dados_junto2)
dados_juntos2
View(dados_juntos2)
View(populacao)
#criando o dataframe do PIB
pib <- data.frame(pais = c("Brasil", "Brasil", "Argentina", "Argentina"),
ano = c(2010, 2015, 2010, 2015),
pib = c(2201024269918, 1775807106436, 369446376293, 545701551954))
dados_juntos2 <- merge(populacao, pib, by.x = c("pais", "ano"))
View(dados_juntos2)
dados_juntos3 <- merge(populacao, pib, by.y = c("pais", "ano"))
View(dados_juntos3)
#criando o dataframe do PIB
pib <- data.frame(pais = c("Brasil", "Brasil", "Argentina", "Argentina"),
year = c(2010, 2015, 2010, 2015),
pib = c(2201024269918, 1775807106436, 369446376293, 545701551954))
View(pib)
#juntando as informações dos dois dataframes
dados_juntos <- merge(populacao, pib, by.x = c("pais", "ano"), by.y = c("pais", "year"))
#printando o resultado
View(dados_juntos)
View(pib)
#juntando as informações dos dois dataframes
dados_juntos <- merge(populacao, pib, by.x = c("pais", "ano"), by.y = c("pais", "ano"))
#juntando as informações dos dois dataframes
dados_juntos <- merge(populacao, pib, by.x = c("pais", "ano"), by.y = c("pais", "year"))
dados_juntos2 <- merge(populacao, pib, by.x = c("pais", "ano"))
dados_juntos2 <- merge(populacao, pib, by.x = c("pais", "year"))
dados_juntos2 <- merge(populacao, pib, by.x = c("pais", "year"), by.y = c("pais", "ano"))
dados_juntos2 <- merge(populacao, pib, by.x = c("pais", "ano"))
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos/BigDataNaPratica_NetFlix")
getwd()
# Configurando Diretório de Trabalho
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
source("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R/funcao_merge.R", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R/funcao_merge.R", encoding = 'UTF-8', echo=TRUE)
