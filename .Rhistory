jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos/Exercicios")
getwd()
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
funcao <- function(param1, param2) {
df1 <- data.frame(vec1 = param1,
vec2 = param2)
print(df1)
}
funcao(vec1, vec2)
View(funcao(vec1, vec2))
df2 <- matrix(c(1:16), nrow = 4, ncol = 4, byrow = T)
df2
media_apenas_segunda_linha <- mean(df2[2, ])
media_apenas_segunda_linha
df2
# calculando a media de cada linha 1
media_linhas <- rowMeans(df2)
media_linhas
media_apenas_segunda_linha <- mean(df2[2, ])
media_apenas_segunda_linha
# calculando a media de cada linha 2
media_linhas2 <- apply(df2, MARGIN = 1, FUN = mean)
media_linhas2
media_uma_disciplina
source("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos/Exercicios/Lista_Exercicios.R", encoding = 'UTF-8', echo=TRUE)
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
View(escola)
escola
media_por_disciplina <- rowMeans(escola[, 2:4])
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
escola
media_por_disciplina <- rowMeans(escola[, 2:4])
media_por_disciplina2 <- apply(escola[, 2:4], 1, mean)
media_por_disciplina
media_por_disciplina2
media_uma_disciplina <- colMeans(escola[, 2:4])
media_uma_disciplina2 <- apply(escola[, 2:4], 2, mean)
media_uma_disciplina
media_uma_disciplina2
media_uma_disciplina <- colMeans(escola[, 2:4])
media_uma_disciplina
media_uma_disciplina
media_por_disciplina <- colMeans(escola[, 2:4])
media_por_disciplina2 <- apply(escola[, 2:4], 2, mean)
media_por_disciplina
media_por_disciplina2
media_uma_disciplina <- rowMeans(escola[, 2:4])
media_uma_disciplina2 <- apply(escola[, 2:4], 1, mean)
media_uma_disciplina
media_uma_disciplina2
# media uma disciplina
media_uma_disciplina <- rowMeans(escola[, 2:4])
media_uma_disciplina
# media uma disciplina
media_uma_disciplina <- mean(escola$Matematica)
media_uma_disciplina
media_uma_disciplina2 <- apply(escola[, 2:4], 1, mean)
media_uma_disciplina2
media_uma_disciplina2 <- apply(escola$Matematica, 2, mean)
media_uma_disciplina2 <- apply(escola[, c(2), drop=F], 2, mean)
media_uma_disciplina2
media_uma_disciplina2 <- apply(escola[, c(2:4), drop=F], 2, mean)
media_uma_disciplina2
media_por_disciplina2
media_uma_disciplina2 <- apply(escola[, 2, drop=F], 2, mean)
media_uma_disciplina2
media_por_disciplina <- data.frame(media_por_disciplina = apply(escola[, 2:4], 2, mean))
media_por_disciplina
# pratica 4
lst <- list(a = 1:10, b = 1:5)
lst# Exercicio 5
lst
do.call(sum, lst)
vetor <- unlist(lst)
vetor
grafico <-
ggplot(data = mtcars, aes(x = disp, y = mpg)) +
geom_point() +
labs(title = 'Disp x Mpg', x = 'Disp', y = 'Mpg')
#com plot_ly
graficoo <-
plot_ly(data = mtcars, x = ~disp, y = ~mpg,
type = 'scatter', mode = 'markers', text = rownames(mtcars)) %>%
layout(title = 'Dips x Mpg',
xaxis = list(title = 'Disp'),
yaxis = list(title = 'Mpg'))
graficoo
grafico <-
ggplot(data = mtcars, aes(x = disp, y = mpg)) +
geom_point() +
labs(title = 'Disp x Mpg', x = 'Disp', y = 'Mpg')
grafico
mat1 <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
mat1
var_names <- c("Variável 1", "Variável 2", "Variável 3", "Variável 4")
barplot(mat1, beside = TRUE, col = rainbow(ncol(mat1)),
main = "Gráfico de Barras", xlab = "Variáveis", ylab = "Valores",
names.arg = var_names)
barplot(mat1, beside = T)
barplot(mat1)
barplot(mat1, beside = F)
barplot(mat1, beside = T)
barplot(mat1, beside = TRUE, col = rainbow(ncol(mat1)),
main = "Gráfico de Barras", xlab = "Variáveis", ylab = "Valores",
names.arg = var_names)
mat1
# pratica 3 (com ggplot - precisamos criar um dataframe dando nome as colunas)
var_names <- c("Variável 1", "Variável 2", "Variável 3", "Variável 4")
df <- data.frame(mat1)
df
colnames(df) <- var_names
df
# pratica 1 (beside é barra lado a lado)
barplot(df, beside = T)
df
ggplot(df_, aes(x = variable, y = value, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras", x = "Variáveis", y = "Valores") +
scale_fill_discrete(name = "Variáveis")
ggplot(df, aes(x = variable, y = value, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras", x = "Variáveis", y = "Valores") +
scale_fill_discrete(name = "Variáveis")
df <- data.frame(matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T))
colnames(df) <- var_names
View(df)
View(df)
library(ggplot2)
library(tidyr)
ggplot(df, aes(x = factor(Var1), y = Valor, fill = Variavel)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
df_tidy <- gather(df, key = "Variavel", value = "Valor")
df_tidy
mat1
ggplot(df_tidy, aes(x = factor(Var1), y = Valor, fill = Variavel)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
ggplot(df_tidy, aes(x = factor(Variavel), y = Valor, fill = Variavel)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
ggplot(df_tidy, aes(x = factor(variable), y = Valor, fill = Variavel)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
df_tidy <- gather(df, key = "Variavel", value = "Valor") %>% rename(variable = Variavel)
df_tidy
ggplot(df_tidy, aes(x = factor(variable), y = Valor, fill = Var.names)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
ggplot(df_tidy, aes(x = factor(variable), y = Valor, fill = Variavel)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
ggplot(df_tidy, aes(x = factor(variable), y = Valor, fill = Variavel)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
ggplot(df_tidy, aes(x = factor(variable), y = Valor, fill = variable.names)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
ggplot(df_tidy, aes(x = factor(variable), y = Valor, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gráfico de Barras", x = "Observações", y = "Valores") +
theme(legend.position = "bottom")
mat1
# pratica 1 (beside é barra lado a lado)
barplot(mat1, beside = T)
barplot(mat1, beside = TRUE, col = rainbow(ncol(mat1)),
main = "Gráfico de Barras", xlab = "Variáveis", ylab = "Valores",
names.arg = var_names)
data(diamonds)
ggplot(data = diamonds, aes(x = price, group = fill, fill = cut)) +
geom_density(adjust = 1.5)
library(plotly)
plot_ly(df, x = ~var_names, y = ~V1, name = "Observação 1", type = "bar") %>%
add_trace(y = ~V2, name = "Observação 2") %>%
add_trace(y = ~V3, name = "Observação 3") %>%
layout(title = "Gráfico de Barras", xaxis = list(title = "Variáveis"), yaxis = list(title = "Valores"))
var_names <- c("Variável 1", "Variável 2", "Variável 3", "Variável 4")
df <- data.frame(matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T))
colnames(df) <- var_names
plot_ly(df, x = ~var_names, y = ~df[1,], name = "Observação 1", type = "bar") %>%
add_trace(y = ~df[2,], name = "Observação 2") %>%
add_trace(y = ~df[3,], name = "Observação 3") %>%
layout(title = "Gráfico de Barras", xaxis = list(title = "Variáveis"), yaxis = list(title = "Valores"))
df
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microssoft-Azure-Machine-Learning/4.Linguagem-R-Graficos/BigDataNaPratica_NetFlix")
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microssoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/5.Manipulacao-de-Arquivos-TXT-CSV-e-Planilhas-Excel-em-R")
getwd()
# Usando as funções base do R (pacote utils)
search()
gc()
